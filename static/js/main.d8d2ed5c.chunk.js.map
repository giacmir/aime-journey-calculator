{"version":3,"sources":["constants.js","functions.js","components/terraintype.js","components/form.js","components/result.js","components/calculator.js","index.js"],"names":["terrains","name","color","modifier","peril","countHexes","values","result","Constants","map","terrain","i","parseInt","throwDice","sides","Math","floor","random","TerrainType","props","className","style","backgroundColor","type","value","onChange","onChangeCallback","Form","this","ev","onChangeValues","defaultValue","React","Component","Result","label","Calculator","state","getInitialState","target","setState","round","Logic","valueArray","item","maxValue","max","apply","maxTerrain","forEach","hexes","formula","localState","window","localStorage","getItem","JSON","parse","setItem","stringify","onChangeValue","calculateTime","calculateDistance","calculatePeril","calculateJourneyLength","calculateEvents","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d8d2ed5c.chunk.js","sourcesContent":["export const terrains = [\n\t{\n\t\tname: 'Very Easy',\n\t\tcolor: '#F1E1CB',\n\t\tmodifier: 0.5,\n\t\tperil: 0\n\t},\n\t{\n\t\tname: 'Easy',\n\t\tcolor: '#D9C99B',\n\t\tmodifier: 1,\n\t\tperil: 1\n\t},\n\t{\n\t\tname: 'Moderate',\n\t\tcolor: '#799852',\n\t\tmodifier: 1.5,\n\t\tperil: 2\n\t},\n\t{\n\t\tname: 'Hard',\n\t\tcolor: '#E99349',\n\t\tmodifier: 2,\n\t\tperil: 3\n\t},\n\t{\n\t\tname: 'Severe',\n\t\tcolor: '#AA6755',\n\t\tmodifier: 3,\n\t\tperil: 4\n\t},\n\t{\n\t\tname: 'Daunting',\n\t\tcolor: '#EE4A4C',\n\t\tmodifier: 5,\n\t\tperil: 5\n\t}\n];\n\nexport const maxPeril = 5;\nexport const minimumEvents = 1;\n","import * as Constants from './constants.js';\n\nexport function calculateTime(values) {\n\tlet result = 0;\n\tConstants.terrains.map((terrain, i) => {\n\t\tresult += parseInt(values[terrain.name] || 0) * terrain.modifier\n\t\treturn true;\n\t});\n\n\tresult = Math.round(result / 2);\n\n\treturn result + \" days\";\n}\n\nexport function calculateDistance(values) {\n\tconst result = countHexes(values);\n\n\treturn result * 10 + \" miles\";\n}\n\nexport function calculatePeril(values) {\n\tconst valueArray = Constants.terrains.map((item, i) => {\n\t\treturn parseInt(values[item.name]) || 0;\n\t});\n\tconst maxValue = Math.max.apply(null, valueArray);\n\n\tlet maxTerrain = false;\n\tConstants.terrains.forEach((item) => {\n\t\tif (parseInt(values[item.name]) === maxValue) {\n\t\t\tmaxTerrain = item;\n\t\t}\n\t});\n\n\tif (maxTerrain !== false) {\n\t\treturn `${maxTerrain.peril} (${maxTerrain.name})`;\n\t}\n\treturn '';\n}\n\nexport function calculateJourneyLength(values) {\n\tconst hexes = countHexes(values);\n\tlet result;\n\n\tif (hexes <= 15) {\n\t\tresult = 'Short';\n\t}\n\telse if (hexes <= 40) {\n\t\tresult = \"Medium\";\n\t}\n\telse {\n\t\tresult = \"Long\";\n\t}\n\n\treturn result + \" Journey\";\n}\n export function calculateEvents(values) {\n\t const hexes = countHexes(values);\n\t let result;\n\t let formula;\n\n\tif (hexes <= 15) {\n\t\tresult = throwDice(2, 0);\n\t\tformula = \"1d2\";\n\t}\n\telse if (hexes <= 40) {\n\t\tresult = throwDice(2, 1);\n\t\tformula = \"1d2+1\"\n\t}\n\telse {\n\t\tresult = throwDice(3, 2);\n\t\tformula = \"1d3+2\"\n\t}\n\t  return `${result} (${formula})`;\n }\n\nfunction countHexes(values) {\n\tlet result = 0;\n\tConstants.terrains.map((terrain, i) => {\n\t\tresult += parseInt(values[terrain.name] || 0)\n\t\treturn true;\n\t});\n\n\treturn result;\n}\n\nfunction throwDice(sides, modifier) {\n\tconst diceroll =  Math.floor(Math.random() * (sides)) + 1\n\treturn diceroll + parseInt(modifier);\n}\n","import React from 'react';       \n\nexport default function TerrainType(props) {\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"terrain-color terrain-{props.color}\" style={{backgroundColor: props.color}}></div>\n\t\t\t\t<label>\n\t\t\t\t\t{props.name}\t\n\t\t\t\t\t<input type=\"number\" value={props.value} onChange={props.onChangeCallback}/>\n\t\t\t</label>\n\t\t</div>\n\t);\n}\n","import React from 'react';\nimport TerrainType from './terraintype';\n\nexport default class Form extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<form className=\"pure-form-stacked pure-form\">\n\t\t\t{this.props.terrains.map((terrain, i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<TerrainType key={terrain.name} color={terrain.color} name={terrain.name} \n\t\t\t\t\tvalue={this.props.values[terrain.name] || 0} onChangeCallback={((ev) => {this.props.onChangeValues(terrain.name, ev)})} defaultValue=\"0\"/>\n\t\t\t\t);\n\t\t\t})}\n\t\t\t</form>\n\t\t);\n\t}\n}\n","import React from 'react';\n\nexport default function Result(props) {\n\treturn (\n\t\t<div>\n\t\t\t<p>{props.label}</p>\n\t\t\t<h2>{props.result}</h2>\n\t\t</div>\n\t);\n}\n","import React from 'react';       \nimport * as Logic from '../functions.js';\nimport Form from './form';\nimport Result from './result';\n\n\nexport default class Calculator extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = this.getInitialState();\n\t}\n\n\tonChangeValue(type, ev) {\n\t\treturn (type, ev) => {\n\t\t\tconst values = {...this.state.values};\n\t\t\tvalues[type] = ev.target.value;\n\t\t\tthis.setState({\n\t\t\t\tvalues: values\n\t\t\t});\n\t\t}\n\t}\n\n\tcalculateTime() {\n\t\treturn Logic.calculateTime({...this.state.values});\n\t}\n\n\tcalculateDistance() {\n\t\treturn Logic.calculateDistance({...this.state.values});\n\t}\n\n\tcalculatePeril() {\n\t\treturn Logic.calculatePeril({...this.state.values});\n\t}\n\n\tcalculateJourneyLength() {\n\t\treturn Logic.calculateJourneyLength({...this.state.values});\n\t}\n\n\tcalculateEvents() {\n\t\treturn Logic.calculateEvents({...this.state.values});\n\t}\n\n\tgetInitialState() {\n\t\tconst localState = window.localStorage.getItem('trip');\n\n\t\treturn localState !== null ? JSON.parse(localState): {values: {}};\n\t}\n\n\tcomponentDidUpdate() {\n\t\twindow.localStorage.setItem('trip', JSON.stringify(this.state));\n\t}\n\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"pure-g\">\n\t\t\t\t<div className=\"pure-u-3-5\">\n\t\t\t\t\t<Form terrains={this.props.terrains} values={this.state.values} onChangeValues={this.onChangeValue()}/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"pure-u-2-5\">\n\t\t\t\t\t<Result result={this.calculateTime()} label=\"Travel time\"/>\n\t\t\t\t\t<Result result={this.calculateDistance()} label=\"Travel distance\"/>\n\t\t\t\t\t<Result result={this.calculatePeril()} label=\"Peril rating\"/>\n\t\t\t\t\t<Result result={this.calculateJourneyLength()} label=\"Length\"/>\n\t\t\t\t\t<Result result={this.calculateEvents()} label=\"Events number\"/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import ReactDOM from 'react-dom';\nimport Calculator from './components/calculator.js';\nimport * as Constants from './constants.js';\nimport './index.css';\n\n\nReactDOM.render(\n\t<Calculator terrains={Constants.terrains}/>,\n\tdocument.getElementById('root')\n)\n\n"],"sourceRoot":""}